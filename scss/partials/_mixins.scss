/*********************
TYPE
*********************/

@mixin font-smoothing($value: on) {
    @if $value == on {
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
    @else {
        -webkit-font-smoothing: subpixel-antialiased;
        -moz-osx-font-smoothing: auto;
    }
}

// USAGE: @include tracking(100, 12px)
@mixin tracking($ps-tracking, $font-size) {
	$base-font-size: $body-size;
	$letter-rem-spacing: ();

	$letter-px-spacing: ($ps-tracking * $font-size) / 1000;
	$rem-calcs: $letter-px-spacing / $base-font-size;
	$letter-rem-spacing: join($letter-rem-spacing, #{$rem-calcs}rem);

	letter-spacing: $letter-px-spacing;
	letter-spacing: $letter-rem-spacing;
}



$baseline-px: $body-size;
@mixin rem($property, $px-values) {
	// Convert the baseline into rems
	$baseline-rem: $baseline-px / 1rem * 1;
	// Print the first line in pixel values
	#{$property}: $px-values;
	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px-values) == "number" {
		#{$property}: $px-values / $baseline-rem;
	} @else {
		// Create an empty list that we can dump values into
		$rem-values: ();
		@each $value in $px-values {
			// If the value is zero or not a number, return it
			@if $value == 0 or type-of( $value ) != "number" {
				$rem-values: append($rem-values, $value);
			} @else {
				$rem-values: append($rem-values, $value / $baseline-rem);
			}
		}
		// Return the property and its list of converted values
		#{$property}: $rem-values;
	}
}